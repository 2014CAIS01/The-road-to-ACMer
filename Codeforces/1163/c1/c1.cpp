/* Generated by powerful Codeforces Tool
 * Author: lonelam
 * Time: 2019-05-10 00:09:49
**/

#include <bits/stdc++.h>
using namespace std;

#pragma optimize("-O3")

typedef long long ll;
typedef long double ld;
typedef vector<int> VI;
typedef vector<ll> VL;
typedef pair<int, int> PII;
typedef pair<ll, ll> PLL;

string to_string(string s) { return '"' + s + '"'; }

string to_string(const char* s) { return to_string((string)s); }

string to_string(const bool& b) { return (b ? "true" : "false"); }

template <typename A, typename B>
string to_string(pair<A, B> p) { return "(" + to_string(p.first) + ", " + to_string(p.second) + ")"; }

template <typename A>
string to_string(const A& v)
{
    bool first = true;
    string res = "{";
    for (const auto& x : v)
    {
        if (!first)
            res += ", ";
        first = false;
        res += to_string(x);
    }
    res += "}";
    return res;
}

void debug_out() { cerr << endl; }

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T)
{
    cerr << " " << to_string(H);
    debug_out(T...);
}

#ifndef ONLINE_JUDGE
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__);
#else
#define debug(...) 42;
#define cerr \
    if (false) cout
#endif

template <typename T>
inline void _read(T& x)
{
    cin >> x;
}

template <typename A, typename B>
inline void _read(pair<A, B>& x)
{
    _read(x.first);
    _read(x.second);
}

template <typename T>
inline void _read(vector<T>& x)
{
    for (auto& v : x)
        _read(v);
}

void R() {}

template <typename T, typename... U>
void R(T& head, U&... tail)
{
    _read(head);
    R(tail...);
}

#define endl '\n'

template <typename T>
inline void _write(const T& x)
{
    cout << x << ' ';
}

template <typename A, typename B>
inline void _write(const pair<A, B>& x)
{
    _write(x.first);
    _write(x.second);
}

template <typename T>
inline void _write(const vector<T>& in)
{
    for (const auto& x : in)
        _write(x);
}

void W() { cout << endl; }

template <typename T, typename... U>
void W(const T& head, const U&... tail)
{
    _write(head);
    W(tail...);
}

#define my_sort_unique(c) (sort(c.begin(), c.end()), c.resize(distance(c.begin(), unique(c.begin(), c.end()))))
#define my_unique(a) a.resize(distance(a.begin(), unique(a.begin(), a.end())))
#define X first
#define Y second

void go();

int main()
{
#ifndef ONLINE_JUDGE
    freopen("1.in", "r", stdin);
    freopen("1.out", "w", stdout);
#endif
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    go();
    return 0;
}

/****************************************************************************************************/

void norm(ll& x, ll& y)
{
    ll d = gcd(abs(x), abs(y));
    x /= d, y /= d;
    if (x < 0) x = -x, y = -y;
    if (x == 0 && y < 0) y = -y;
}

void norm(ll& x, ll& y, ll& z)
{
    ll d = gcd(abs(x), abs(y));
    d = gcd(d, abs(z));
    x /= d, y /= d, z /= d;
    if (x < 0) x = -x, y = -y, z = -z;
    if (x == 0 && y < 0) y = -y, z = -z;
    if (x == 0 && y == 0 && z < 0) z = -z;
}

typedef long long ll;

void go()
{
    int n;
    R(n);
    vector<pair<ll, ll>> vec;
    for (int i = 0, x, y; i < n; i++)
    {
        R(x, y);
        vec.emplace_back(x, y);
    }
    map<pair<ll, ll>, int> dic;
    set<tuple<ll, ll, ll>> s;
    int x1, y1, x2, y2;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < i; j++)
        {
            tie(x1, y1) = vec[i];
            tie(x2, y2) = vec[j];
            ll dx = x1 - x2;
            ll dy = y1 - y2;
            norm(dx, dy);
            dic[{dx, dy}]++;
            ll xx = x1 - x2;
            ll yy = y1 - y2;
            ll zz = 1LL * x1 * y2 - 1LL * x2 * y1;
            norm(xx, yy, zz);
            if (s.count({xx, yy, zz})) dic[{dx, dy}]--;
            s.insert({xx, yy, zz});
        }

    int m = s.size();
    ll ans = 1LL * m * (m - 1) / 2;
    for (auto& [key, value] : dic)
        ans -= 1LL * value * (value - 1) / 2;
    W(ans);
}
